#include <iostream>  /
#include <locale>    
#include <cstdlib> 

using namespace std; // Использование стандартного пространства имен

// Структура узла списка
struct Node
{
    char* fname; // Указатель на строку с фамилией
    int id;      // Порядковый номер элемента
    int value1;  // Первое значение элемента
    int value2;  // Второе значение элемента
    Node* next;  // Указатель на следующий узел
};

// Функция получения длины списка через заглавный элемент
int len(Node* n)
{
    return (*n).value1; // Возвращаем значение value1 заглавного элемента (количество элементов)
}

// Функция вывода списка
void print(Node* n)
{
    Node* current = (*n).next; // Указатель на первый реальный элемент
    cout << "_____________________________________________________________" << endl;
    cout << "Фамилия__________ID__________Value1__________Value2" << endl;
    int k = 1; // Счетчик позиций

    // Цикл вывода элементов пока не встретим заглавный элемент (id == 0)
    while ((*current).id != NULL)
    {
        // Вывод информации об элементе
        cout << k << ") " << (*current).fname;
        cout << "__________" << (*current).id;
        cout << "__________" << (*current).value1;
        cout << "__________" << (*current).value2 << endl;

        current = (*current).next; // Переход к следующему элементу
        k++; // Увеличение счетчика
    }
    cout << "_____________________________________________________________" << endl << endl;
}

// Функция вывода списка дважды
void printdva(Node* n)
{
    Node* current = n->next; // Указатель на первый реальный элемент
    cout << "_____________________________________________________________" << endl;
    cout << "Фамилия__________ID__________Value1__________Value2" << endl;

    int total = 2 * len(n); // Общее количество элементов для вывода (2 круга)
    int k = 1; // Счетчик позиций

    // Цикл для двукратного вывода списка
    for (int i = 0; i < total; i++)
    {
        // Вывод информации об элементе
        cout << k << ") " << (*current).fname;
        cout << "__________" << (*current).id;
        cout << "__________" << (*current).value1;
        cout << "__________" << (*current).value2 << endl;

        current = (*current).next; // Переход к следующему элементу
        // Если дошли до заглавного элемента - вернуться к началу
        if ((*current).id == NULL) current = (*n).next;
        k++; // Увеличение счетчика
    }
    cout << "_____________________________________________________________" << endl << endl;
}

// Функция вывода четных элементов
void printchet(Node* n)
{
    Node* current = (*(*n).next).next; // Указатель на второй элемент
    cout << "_____________________________________________________________" << endl;
    cout << "Фамилия__________ID__________Value1__________Value2" << endl;

    int n_len = len(n); // Общее количество элементов
    int k = 1; // Счетчик позиций

    // Цикл с шагом 2 (только четные позиции)
    for (int i = 1; i < n_len; i += 2)
    {
        // Вывод информации об элементе
        cout << k << ") " << (*current).fname;
        cout << "__________" << (*current).id;
        cout << "__________" << (*current).value1;
        cout << "__________" << (*current).value2 << endl;

        current = (*(*current).next).next; // Переход через один элемент
        k++; // Увеличение счетчика
    }
    cout << "_____________________________________________________________" << endl << endl;
}

// Функция добавления элемента в список
void add(Node* n, char* fname)
{
    Node* new_node = new Node(); // Создание нового узла
    (*new_node).fname = fname;   // Запись фамилии
    (*new_node).id = (*n).value1 + 1; // Установка id (порядковый номер)
    (*new_node).value1 = rand() % 99 - 50; // Генерация случайного значения 1
    (*new_node).value2 = rand() % 99 - 50; // Генерация случайного значения 2

    (*new_node).next = (*n).next; // Новый элемент указывает на бывший первый
    (*n).next = new_node;         // Заглавный элемент указывает на новый
    (*n).value1++;                // Увеличение счетчика элементов
}

// Главная функция
int main()
{
    setlocale(LC_ALL, "rus"); // Установка русской локализации

    // Создание заглавного элемента
    Node* head = new Node();
    (*head).fname = NULL;   // Фамилия не используется для заглавного
    (*head).id = 0;         // Идентификатор заглавного элемента
    (*head).value1 = 0;     // Начальное количество элементов
    (*head).next = head;    // Зацикливание списка на себя

    int n; // Переменная для количества элементов
    cout << "Введите количество элементов: ";
    cin >> n; // Ввод количества элементов
    cout << "_____________________________________________________________" << endl << endl;

    // Цикл добавления элементов
    for (int i = 0; i < n; i++)
    {
        char* fname = new char[20]; // Выделение памяти под фамилию
        cout << "Введите фамилию: ";
        cin >> fname; // Ввод фамилии
        add(head, fname); // Добавление элемента
        print(head);      // Вывод списка после добавления
    }

    // Вывод списка дважды
    cout << endl << "Вывод списка дважды: " << endl;
    printdva(head);

    // Вывод четных элементов
    cout << "Вывод четных элементов: " << endl;
    printchet(head);
}
/*
Tecт 1
Введите количество элементов: 5
_____________________________________________________________

Введите фамилию: Dorofeev
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Dorofeev__________1__________-9__________3
_____________________________________________________________

Введите фамилию: Batalov
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Batalov__________2__________47__________17
2) Dorofeev__________1__________-9__________3
_____________________________________________________________

Введите фамилию: Charyshnikov
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Charyshnikov__________3__________12__________32
2) Batalov__________2__________47__________17
3) Dorofeev__________1__________-9__________3
_____________________________________________________________

Введите фамилию: Fadeev
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Fadeev__________4__________43__________4
2) Charyshnikov__________3__________12__________32
3) Batalov__________2__________47__________17
4) Dorofeev__________1__________-9__________3
_____________________________________________________________

Введите фамилию: Gordeev
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Gordeev__________5__________-16__________-39
2) Fadeev__________4__________43__________4
3) Charyshnikov__________3__________12__________32
4) Batalov__________2__________47__________17
5) Dorofeev__________1__________-9__________3
_____________________________________________________________


Вывод списка дважды:
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Gordeev__________5__________-16__________-39
2) Fadeev__________4__________43__________4
3) Charyshnikov__________3__________12__________32
4) Batalov__________2__________47__________17
5) Dorofeev__________1__________-9__________3
6) Gordeev__________5__________-16__________-39
7) Fadeev__________4__________43__________4
8) Charyshnikov__________3__________12__________32
9) Batalov__________2__________47__________17
10) Dorofeev__________1__________-9__________3
_____________________________________________________________

Вывод четных элементов:
_____________________________________________________________
Фамилия__________ID__________Value1__________Value2
1) Fadeev__________4__________43__________4
2) Batalov__________2__________47__________17
_____________________________________________________________
*/
